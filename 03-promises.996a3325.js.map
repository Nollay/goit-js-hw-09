{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SA0CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACT,OAAIN,EACKI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAE3BA,MAjDPQ,EAAAZ,GAASa,OAAOC,KAAK,IACrBF,EAAAZ,GAASa,OAAOE,MAAM,CACpBC,MAAO,QACPC,QAAS,MAIEC,SAASC,cAAc,SAG/BC,iBAAiB,UAGtB,SAAgBC,GACdA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALnB,MAAOuB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGvBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAChCnB,EAAAZ,GAASa,OAAOqB,KAAK,UAA+BC,OAArBN,EAAW,YAAgCM,OAAtBH,EAAU,cAAwBG,OAAZF,IAG1E,IAAK,IAAIG,EAAW,EAAGA,GAAYH,EAAaG,GAAY,EAC1DlC,EAAckC,EAAUP,GACnBQ,MAAK,SAAAC,G,IAAGnC,EAAQmC,EAARnC,SAAUC,EAAKkC,EAALlC,MACjBQ,EAAAZ,GAASa,OAAO0B,QAAQ,uBAAwCJ,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,UAEvEoC,OAAM,SAAAF,G,IAAGnC,EAAQmC,EAARnC,SAAUC,EAAKkC,EAALlC,MAClBQ,EAAAZ,GAASa,OAAO4B,QAAQ,sBAAqCN,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,UAGzEyB,GAAcG,K","sources":["src/js/03-promises.js"],"sourcesContent":["// імпорт бібліотеки Notiflix\nimport Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nNotiflix.Notify.init({});   \nNotiflix.Notify.merge({     \n  width: '310px',\n  timeout: 10000,\n});\n\n\nconst form = document.querySelector('.form');\n\n\nform.addEventListener(\"submit\", submit);\n\n\nfunction submit(event) {\n  event.preventDefault();   \n  const {\n    elements: { delay, step, amount } \n  } = event.currentTarget;           \n\n  let delayValue = Number(delay.value);   \n  let stepValue = Number(step.value);     \n  let amountValue = Number(amount.value); \n  Notiflix.Notify.info(`delay: ${delayValue}, step: ${stepValue}, amount: ${amountValue}`);\n    \n  \n  for (let position = 1; position <= amountValue; position += 1) {\n    createPromise(position, delayValue)      \n        .then(({ position, delay }) => {      \n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {      \n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    \n    delayValue += stepValue;    \n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;    \n  \n  const promise = new Promise((resolve, reject) => {  \n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve({ position, delay }) \n      } else {\n        return reject({ position, delay })  \n      }\n    }, delay);\n  })\n  return promise;   \n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$parcel$interopDefault","Notify","init","merge","width","timeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","info","concat","position1","then","param","success","catch","failure"],"version":3,"file":"03-promises.996a3325.js.map"}