{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAGAC,EAAAF,GAASG,OAAOC,KAAK,IACrBF,EAAAF,GAASG,OAAOE,MAAM,CACpBC,MAAO,QACPC,QAAS,MAoCX,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,IACLN,EACKI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,KAE3BA,MA1CMQ,SAASC,cAAc,SAG/BC,iBAAiB,UAGtB,SAAgBC,GACdA,EAAMC,iBACN,MACEC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAEV,IAAIC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAChC5B,EAAAF,GAASG,OAAO8B,KAAK,UAAUL,YAAqBG,cAAsBC,KAG1E,IAAK,IAAIE,EAAW,EAAGA,GAAYF,EAAaE,GAAY,EAC1D1B,EAAc0B,EAAUN,GACnBO,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBR,EAAAF,GAASG,OAAOiC,QAAQ,uBAAqB3B,QAAiBC,UAE/D2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBR,EAAAF,GAASG,OAAOmC,QAAQ,sBAAoB7B,QAAeC,UAGjEkB,GAAcG","sources":["src/js/03-promises.js"],"sourcesContent":["// імпорт бібліотеки Notiflix\nimport Notiflix from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nNotiflix.Notify.init({});   \nNotiflix.Notify.merge({     \n  width: '310px',\n  timeout: 10000,\n});\n\n\nconst form = document.querySelector('.form');\n\n\nform.addEventListener(\"submit\", submit);\n\n\nfunction submit(event) {\n  event.preventDefault();   \n  const {\n    elements: { delay, step, amount } \n  } = event.currentTarget;           \n\n  let delayValue = Number(delay.value);   \n  let stepValue = Number(step.value);     \n  let amountValue = Number(amount.value); \n  Notiflix.Notify.info(`delay: ${delayValue}, step: ${stepValue}, amount: ${amountValue}`);\n    \n  \n  for (let position = 1; position <= amountValue; position += 1) {\n    createPromise(position, delayValue)      \n        .then(({ position, delay }) => {      \n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {      \n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    \n    delayValue += stepValue;    \n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;    \n  \n  const promise = new Promise((resolve, reject) => {  \n    setTimeout(() => {\n      if (shouldResolve) {\n        return resolve({ position, delay }) \n      } else {\n        return reject({ position, delay })  \n      }\n    }, delay);\n  })\n  return promise;   \n}"],"names":["$eWCmQ","parcelRequire","$parcel$interopDefault","Notify","init","merge","width","timeout","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","info","position1","then","success","catch","failure"],"version":3,"file":"03-promises.d465fe65.js.map"}